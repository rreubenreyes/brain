* =deriveStateFromProps=
#+BEGIN_SRC js
/**
 * Compare given values from two different object using a comparator
 * function as a truth condition. Returns a tuple which represents
 * if there are any state updates.
 *
 * @param  { Object }  compare      Source object to compare from
 * @param  { Object }  to           Output object whose shape will be used in return
 * @param  { Array }   comparators  Strategy to map source values to output values
 * @return { [Boolean, Object] } If none of the comparators return true, left value is
 *  false and right is empty. Else, left is true and right contains derived state.
 */
export const deriveStateFromProps = ({ source, out, comparators }) =>
    comparators.reduce(
        ([, obj], { mapProp: p, toState: s, truthCondition: check }) => {
            const truthy = check(source[s], out[p]);
            const newObj = truthy ? { [s]: out[p] } : {};
            return [truthy, { ...obj, ...newObj }];
        },
        [false, {}]
    );
#+END_SRC
* =Maybe= monad 
#+BEGIN_SRC js
export const Maybe = (x, callback) => {
  const [notX, justX] = [x === null, x];
  if (!notX) return callback(justX);
  else return null;
};
#+END_SRC

* A note on =Function.prototype.name= 
Do not check any code against =Function.prototype.name= if your code is bundled. The name will always get compiled to =t=.
