
* Overview of Products 
i guess a crash wiped this :/ 

* Docs Master 9000
i guess a crash wiped this :/ will do some literate programming stuff on top of this later

** APIs
*** Medical 
provides access to end-users' medical records
**** =codes= response field 
in addition to typical columns, the Medical API exposes *codes* (medical codes):
#+BEGIN_SRC typescript
interface Code {
    code: string // the literal code
    codeSystem: string // code system id
    codeSystemName: string // tied to `codeSystem`
    inferred: boolean // (?)
    name: string // name of the code (tied to `code`)
}
#+END_SRC

codes are used to identify a ridiculous number of conditions/prescriptions/whatever and so are the focal point for customers to provide correct data

***** Relationships 
nearly all medical API endpoints make use of some kind of =Codes= collection. (i imagine) all relationships are 1:1

*** Wellness 
*** Utility API (Sources) 
* Ops (Habanero) 
_data flow:_
#+BEGIN_SRC
[customer server] <-> [auth server] -> [end-user] -> [provider] -> [our pipeline]
 auth requests         session auth     OAuth         data          ?
#+END_SRC

** Manual Sync
*** Auto-sync data flow
[user connects | emit userConnected event]
  -> [server receives event | build recipe]
    -> [recipe is built | kick off crawler]
      -> [crawler is running | FORK (CRAWLER_OK) (CRAWLER_ERR)]

[(CRAWLER_OK) | emit sync sccessful]
  -> [portal receives success event | indicate AllSynced]

[(CRAWLER_ERR) | emit sync unsuccessful]
  -> [portal receives success event | indicate Error]
    -> [server receives error | push connection to manual queue]
*** Manual Sync 101 
[2019-02-08 Fri]
anything that fails for any reason shows up in the manuan sync queue

every portal has weird shit going on with it

everything is XML
** Data Curation?
according to Aaron this isn't a thing right now, but verify with Gagan
* S3 (S3)
** Terraform 
*Terraform* is a tool for building, changing, and versinoing infrastructure safely and efficiently. It uses config files to describe the components needed to run a single application on an entire datacenter. It is able to watch for changes to this config and create incremental execution plans.

Terraform can manage low-level components such as /compute instances/, /storage/, /networking/, as well as high-level components such as /DNS entries/, /SaaS features/, etc.

*** Infrastructure as Code 
Infrastructure is described using a high-level configuration syntax (=config.tf=). This allows a blueprint of your datacenter to be *versioned and treated as you would any other code*. Infrastructure can be shared and reused.

_Sample configuration_ (Providing AWS and deploying a T2 EC2 instance):
#+BEGIN_SRC terraform
provider "aws" {
    access_key = "ACCESS_KEY"
    secret_key = "SECRET_KEY"
    region     = "us-west-1"
}

resource "aws_instance" "example" {
    ami           = "ami-2757f631"
    instance_type = "t2.micro"
}
#+END_SRC

_Sample output_
#+BEGIN_SRC shell
$ terraform init
Initializing the backend...
Initializing provider plugins...
- downloading plugin for provider "aws"...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

\* provider.aws: version = "~> 1.0"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your environment. If you forget, other
commands will detect it and remind you to do so if necessary.
#+END_SRC

*** Execution Plans 
Terraform generates /execution plans/ during a "planning" step. It shows what Terraform will do when you call =apply=.

*** Resource Graph 
Terraform builds a graph of all your resources and parallelizes creation/modification of any non-dependent resources. 

*** Change Automation 
Complex /changesets/ can be applied to infrastructure with minimal human interaction, by using the previous two points.

*** Use Cases

**** Heroku App Setup 
Developers who deploy on Heroku will often create an app, then attach add-ons such as a database or email provider. These must be configured on the Heroku dyno, which can quickly get out of hand. Terraform is used to "codify" the setup required for a Heroku application, automating the process of handling add-ons. It can also set up infrastructure nodes such as setting up a CDN, configuring DNS, etc.

**** Multi-Tier Applications 
A common pattern is *n-tier architecture*. In a 2-tier architecture for example, a pool of web servers (one tier) will use a database tier. In an n-tier architecture, additional tiers get added for API servers, caching servers, routing meshes, etc.

Terraform can describe each tier as a collection of resources, and *dependencies between each tier are handled automatically*. That is, Terraform will ensure that a database tier is deployed before any web servers which depend on it, and will ensure that load balancers are aware of web nodes. 

**** Resource Scheduling 
As an infrastructure scales, it becomes increasingly harder to assign applications to machines. This is a problem that is solved using resource schedulers such as Mesos and Kubernetes.

Terraform can treat these schedulers as providers alongside physical providers such as AWS. Terraform can request and provision resources from them using the same methods that we use to deploy physical infrastructure.

** AWS 
*** EC2 
EC2: Elastic Compute Cloud

One EC2 instance -> one Docker container

*** ECS 
*** S3 
* Support (Success Engineering) 
[[https://humanapi.atlassian.net/browse/HB-66][this]] is a relatively transparent example of what Steven performs wrt developer support

** Mongo Workflow 
*** Questions 
**** for a human which lives in both =externalaccounts= and =appusers=, the =updatedAt= fields are different. why? 
<2019-02-04 Mon>
*** Finding humans/customers 
**** Workflow 
***** Customer has a question regarding their app 
****** Finding the app
_most other queries will be in combination with the below_
#+BEGIN_SRC js
db.getCollection(clientapps).find({ clientId: [ CLIENT_ID ] })
#+END_SRC
****** Customer needs to set up their app 
****** Customer needs to be able to receive notifications
***** Customer has a question regarding a user of their app
****** Finding the human
(assuming the customer can only identify the human w.r.t. their own app)
_most other queries will be in combination with the below_
#+BEGIN_SRC js
db.getCollection(appusers).find({ 
    clientId: [ CLIENT_ID ],
    humanId: [ HUMAN_ID ], // prefer this
    externalId: [ CLIENT_USER_ID ], // this might not always work?
})
#+END_SRC
**** Collections 
in general, public/documented endpoints are 1:1 with their Mongo collections

***** appusers 
all *humans* with associated =humanId=
- =humanId= :: unique to every single /human/ throughout entire production database
    developers should have acecss to =humanId=, so there should be no reason they aren't able to provide us with this
- =userId= :: user identification relationship which is also tied to =externalaccounts=
- =clientId= :: unique to specific customer application (customers may have multiple) 
- =externalId= :: unique to every single /human/ *per customer's =clientId=*

***** externalaccounts 
human accounts *per provider*
- =userId= :: tied to an =appuser= with given =humanId=
- =externalId= :: clientUserId
- =name= :: name of customer application
- =accessToken= :: that specific human's access token

***** clientapps 
customer applications (customers may have multiple)
- =clientSecret=
- =privateKey=
- =isPilot=
- =hasNotifications= :: whether or not customer is receiveing notifications
- =notifyUrl= :: endpoint from which customer receives notifications
- =recentSync= :: sync every x-amount of time
- =allowedFictionalSources= :: sync every x-amount of time
- =recentSync= :: sync every x-amount of time
***** medicalsources find via name (verbatim as on Connect), or id
***** wellnesssoruces 
find via name (verbatim as on Connect), or id

***** users 
*customers*
***** userorganizations 

**** Wellness API weirdness 
***** endpoint:collection 
- Human (summary) :: =userstreams=
- Activities :: =activitysegments=
- Activity Summaries :: =activitysummaries=
- [most measurements] :: unless they have their own collection that maps 1:1 with the endpoint documentation, they are most likely under the =measurements= collection.
#+BEGIN_SRC js
db.getCollection('measurements').distinct('type')
/* returns:
 [
     DBP,
     SBP,
     activity,
     bloodglucose,
     bloodoxygen,
     bmi,
     bodyfat,
     fatfreemas,
     fatmass,
     heartrate,
     height,
     weight,
]
*/
#+END_SRC
- Human (summary) :: =userstreams=
- Human (summary) :: =userstreams=
- Human (summary) :: =userstreams=
- Human (summary) :: =userstreams=
- Human (summary) :: =userstreams=
- Human (summary) :: =userstreams=
** Sample Issues 
*** HB-633 
#+BEGIN_SRC
Affected healthkit user with humanId: "b30466e62f7c5a525fde66bd684e0c0f" / email: "j_m_lejeune@yahoo.com"

end user reports that they are actively syncing their meals data with apple health using Lose It

when querying the HAPI food/meals endpoint, support is not able to see more recent data than "timestamp": "2017-06-16T14:00:00.000Z"

when supports looks at recent rawpushdatas in the query `db.getCollection('rawpushdatas').find({createdAt: {$gt: ISODate("2019-01-01T05:13:53.120Z")}, userId: ObjectId("57dc6472f4da900100163f31")}).sort( {timestamp: -1}

)`, it finds "loseit"-associated payloads, but these are not available via the API

routing to EWF to investigate and resolve missing meals data
#+END_SRC

** misc. questions for Steven 
- KB?
** 1:1s with Steven 
*** [2019-02-06 Wed 14:00]  
**** Prepared Items
***** DONE I need Zendesk acecss in order to walk through support issues
CLOSED: [2019-02-06 Wed 14:55]
- State "DONE"       from              [2019-02-06 Wed 14:55]
Zendesk login that you shared does not work.

- Steven changed my permissions on Zendesk. I can log in with my own information.
- [[https://support.humanapi.co/hc/en-us][knowledge base]]
  
***** DONE Rundown of Mongo workflow?
CLOSED: [2019-02-06 Wed 14:55]
- State "DONE"       from              [2019-02-06 Wed 14:55]
****** DONE Mongo ids clarification 
CLOSED: [2019-02-06 Wed 14:55]
- State "DONE"       from              [2019-02-06 Wed 14:55]
******* =user._id= 
1:1 with =clientapps.userId=

=users= \=== portal users--developers, admins, underwriters, etc.

only developers will have the relationship with =clientapps=
******* =externalaccounts.userId= 
is the *first* =appuser= associated with this external account

******* =externalaccounts.userIds= 
contains *all* =appusers= associated with this external account

****** DONE Clarification of collections (could save for Friday)
CLOSED: [2019-02-06 Wed 14:55]
- State "DONE"       from              [2019-02-06 Wed 14:55]
******* =users= 
******* =externalaccounts= 
when users authenticate using Connect, we create an =externalaccounts= record for them
=domain: consumerapp= is old MyHAPI
******* =userorganizations= 

******* =appusers= 
******* =clientapps= 

***** Getting me set up on actually taking support cases
****** Zorah mentioned that our Zendesk workflow is changing and I should learn it when everything is actually set up.
***** I should manage readme.io and statuspage.humanapi.co
****** [[https://readme.io/?ref_src=hub&project=humanapi][readme.io]] - no account yet 
****** [[https://status.humanapi.co/][statuspage.humanapi.co]] 
******* Where should I be checking source statuses? 
******* Overview? 
**** Friday 
***** Priority 
****** TODO Creating customers in the database 
****** TODO When should we actually write to the production database? 
***** Troubleshooting Wellness API questions 
****** TODO Come up with questions 

*** [2019-02-08 Fri 15:00]  
**** Is it possible to view a user's data through Mongo? What queries should I be running to do this?

**** [[https://humanapi.zendesk.com/agent/tickets/3951][Zendesk #3951]]    
- =humanId= :: =5ef01a19063fc2ed7099f96c99f5d812=
- =clientId= :: =0c689cf14b54a72312fe2aa4011da6b2907563bc=
[[http://product.internal.humanapi.co/lookup/user/5ef01a19063fc2ed7099f96c99f5d812][user on dashboard]]

User claims she is not seeing any Healthkit data via Human API.

_Support tickets_ show populated Healthkit data.
_Dashboard_ shows that only Apple Watch was connected. 
_Portal_ shows sync error.

- user signed up to the Human API app with one email, but authed another in connect
- their records are orphaned because they are being synced to one externalaccount, but there are no records because that =externalaccount= was not connected.
**** heart rate, height, weight, etc. are in the =measurements= collection 

** TEMP Following Zendesk tickets 
*** #3951 
**** Initial message 
Customer has user which claims she has Apple Health data. The customer is not able to fetch this customer's data via data API calls

**** Initial response 
Steven provided a link to a support docs section which references Apple Health. Thinks the issue is likely due to inconsistent credentials being used to log in to the customer's Connect instance and the Human API app on the end-user's phone (*for connecting Healthkit sources via Connect, Connect and iOS app credentials must be the same*). He has advised the customer to:

1. Have the end-user disconnect their Apple Health source via the customer's Connect.
2. Have the end-user reconnect the Apple Health source, making sure that their Human API iOS credentials match the credentials they use in Connect.

**** Correspondence
***** [2019-02-06 Wed 14:17]  
- Customer :: Reports that the end-user has used the same credentials in both iOS and in Connect, but the problem persists.
- (me) Proposed action ::  

** Heuro Health Call 
[2019-02-06 Wed 10:30]
*** Problem statement (Samir - Heuro)

*** Response (Tarek) 
explains from a product standpoint first, guides customer into tech explanation (docs)

- be able to explain docs off top
*** HAPI Action: create dev account/add developers to portal enterprise account 
- DONE by Gagan
  
*** HAPI Action: explain how mobile developers can spawn Connect directly
**** Follow-up email 
#+BEGIN_SRC
Our standard integration method assumes that you're launching the Connect experience from the browser. You can read the documentation here: 

For you, it means that you have to setup a web app which launched Connect and handles 
the communication with your native app. 

Alternatively, if you can't or don't want to use our JavaScript library, you can use this URL to open the Connect experience in a browser window:

https://hapi-connect.humanapi.co/?token=[YOUR_TOKEN]

Where token is the session token or the id token that you have retrieved from our auth server.
#+END_SRC
* CS/Sales 
** Contracts 
*** Pilots 
[2019-02-01 Fri] -- i kind of get the gist of it from the meeting yesterday
**** Claire 1:1 
***** Key customers? 
- Guardian ::
- AAA Life ::
- Ladder ::
- State Farm ::
- Principal ::
- Guardian ::
****** What changes in our approach from customer to customer? 
****** Debrief on wellness customers and that vertical in general?
****** What technical needs/problems come up and how have they been solved before?
****** Providers 
****** Wellness 
****** Enterprise ("Enterprise production")
****** anything else???
***** Prospects 
wut is prospect lol

**** probably questions for Gagan 
***** Product focus 
****** besides via bugfixes, what design insights/considerations have been gained from pilots? 
***** Engineering focus 
****** overview of role? (technical investigation, bugfixes...)
***** Ops focus 
****** besides external issues, what are (internal, within our system) root causes behind manual syncs?

**** Pilot Check-In Minutes 
[2019-01-31 Thu]
***** customer success workflow
setting up internal JIRA workflow to bring *prioritized (in order)* issues to attention ("inbox")

- tickets will be distributed to teams as issues are touched
- teams will pick up tickets per sprint; progress visible via kanban
  
****** purpose 
- for teams to take ownership of issues, be able to distribute them, and visibly esealate priority items
  - *this was steven's thing*
  - _Cole_: steven's process should be preserved
    - the idea is to be able to streamline the team-wide workflow
      
****** standalone JIRA project? 
yes

****** standout issues 
things need to go to manual sync a lot

***** AAA Life pilot live monday 
***** priority pilots 
Principal, Guardian, AAA are considered priority pilots

_Nick_: clarify customer expectations at every step of pilot
_Claire_, _Nick_: pipeline volume to increase astronomically within the next few weeks/months

****** upcoming/potential issues
- manual sync volume too high
- support volume too high

****** _Gagan_: manual sync queue optimization 
ops is investigating manual sync queue issues: manual syncs need to go through like 2023423 different portals, need to streamline

build a manual sync metrics dashboard for 

***** sprint work allocation 
_Cole_: every sprint, some amount of time (not necessarily proportional) is dedicated to:
- technical debt
- new features
- customer-centric issues/requests 
